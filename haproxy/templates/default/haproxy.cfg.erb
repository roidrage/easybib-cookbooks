global
  log 127.0.0.1   local0
  log 127.0.0.1   local1 notice
  #log loghost    local0 info
  maxconn 4096
  #debug
  #quiet
  user haproxy
  group haproxy
  stats socket /tmp/haproxy.sock

defaults
  log             global
  mode            http
  option          httplog
  option          dontlognull
  retries         3
  redispatch
  maxconn         2000
  contimeout      50000
  clitimeout      50000
  srvtimeout      50000
  option          httpclose     # disable keepalive (HAProxy does not yet support the HTTP keep-alive mode)
  option          abortonclose  # enable early dropping of aborted requests from pending queue
  option          httpchk       # enable HTTP protocol to check on servers health
  <% if @node[:haproxy][:enable_stats] -%>
  stats auth <%= @node[:haproxy][:stats_user] %>:<%= @node[:haproxy][:stats_password] %>
  stats uri <%= @node[:haproxy][:stats_url] %>
  <% end -%>
        
# Set up application listeners here.
<% if @node[:haproxy][:rails_backends].blank? && @node[:haproxy][:php_backends].blank? && @node[:haproxy][:static_backends].blank? -%>
listen application 0.0.0.0:80
  # configure a fake backend as long as there are no real ones
  # this way HAProxy will not fail on a config check
  balance roundrobin
  server localhost 127.0.0.1:8080 weight 1 maxconn 5 check
<% else -%>

<% if !@node[:haproxy][:rails_backends].empty? -%>
backend rails_app_servers
  balance roundrobin
  option redispatch
  option httpclose
  option forwardfor
  option httpchk <%= @node[:haproxy][:health_check_method] %> <%= @node[:haproxy][:health_check_url] %>
  <% @node[:haproxy][:rails_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] || 10 %> check inter <%= @node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>

<% if !@node[:haproxy][:rails_backends].empty? -%>
backend rails_app_servers_ssl
  mode tcp
  balance roundrobin
  option redispatch
  option ssl-hello-chk
  <% @node[:haproxy][:rails_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:443 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] || 10 %> check inter <%= @node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>
  
<% if !@node[:haproxy][:php_backends].empty? -%>  
backend php_app_servers
  balance roundrobin
  option redispatch
  option httpclose
  option forwardfor
  option httpchk <%= @node[:haproxy][:health_check_method] %> <%= @node[:haproxy][:health_check_url] %>
  <% @node[:haproxy][:php_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] || 10 %> check inter <%= @node[:haproxy][:check_interval] %>
  <% end -%>  
<% end -%>

<% if !@node[:haproxy][:php_backends].empty? -%>  
backend php_app_servers_ssl
  mode tcp
  balance roundrobin
  option redispatch
  option ssl-hello-chk
  <% @node[:haproxy][:php_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:443 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] || 10 %> check inter <%= @node[:haproxy][:check_interval] %>
  <% end -%>  
<% end -%>
  
<% if !@node[:haproxy][:static_backends].empty? -%>  
backend static_servers
  balance roundrobin
  option redispatch
  option httpclose
  option forwardfor
  option httpchk GET <%= @node[:haproxy][:health_check_url] %> # Nginx doesn't understand OPTIONS
  <% @node[:haproxy][:static_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] || 10 %> check inter <%= @node[:haproxy][:check_interval] %> 
  <% end -%>
<% end -%>

<% if !@node[:haproxy][:static_backends].empty? -%>  
backend static_servers_ssl
  mode tcp
  balance roundrobin
  option redispatch
  option ssl-hello-chk
  <% @node[:haproxy][:static_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:443 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] || 10 %> check inter <%= @node[:haproxy][:check_interval] %> 
  <% end -%>
<% end -%>
  
frontend http-in
  bind :80
  
  # all domains of Rails applications
  <% @node[:haproxy][:rails_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl rails_application_<%= app_name %>_domain_<%= domain %> hdr_end(host) -i <%= domain %>
      <% if app_config['mounted_at'] -%>
  acl rails_application_<%= app_name %>_domain_<%= domain %>_path path_beg <%= app_config['mounted_at'] %>
      <% end -%>
    <% end -%>
  <% end -%>

  # all domains of PHP applications
  <% @node[:haproxy][:php_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl php_application_<%= app_name %>_domain_<%= domain %> hdr_end(host) -i <%= domain %>
      <% if app_config['mounted_at'] -%>
  acl php_application_<%= app_name %>_domain_<%= domain %>_path path_beg <%= app_config['mounted_at'] %>
      <% end -%>
    <% end -%>
  <% end -%>
  
  # all domains of static applications
  <% @node[:haproxy][:static_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl static_application_<%= app_name %>_domain_<%= domain %> hdr_end(host) -i <%= domain %>
      <% if app_config['mounted_at'] -%>
  acl static_application_<%= app_name %>_domain_<%= domain %>_path path_beg <%= app_config['mounted_at'] %>
      <% end -%>
    <% end -%>
  <% end -%>
  
  # choose backend
  <% unless @node[:haproxy][:static_applications].empty? || @node[:haproxy][:static_backends].empty? -%>
    <% @node[:haproxy][:static_applications].each do |app_name, app_config| -%>
      <% app_config['domains'].each do |domain| -%>
        <% if app_config['mounted_at'] -%>
  use_backend static_servers if static_application_<%= app_name %>_domain_<%= domain %> static_application_<%= app_name %>_domain_<%= domain %>_path
        <% else -%>
  use_backend static_servers if static_application_<%= app_name %>_domain_<%= domain %>
        <% end -%>
      <% end -%>
    <% end -%>
  <% end -%>
  
  <% unless @node[:haproxy][:php_applications].empty? || @node[:haproxy][:php_backends].empty? -%>
    <% @node[:haproxy][:php_applications].each do |app_name, app_config| -%>
      <% app_config['domains'].each do |domain| -%>
        <% if app_config['mounted_at'] -%>
  use_backend php_app_servers if php_application_<%= app_name %>_domain_<%= domain %> php_application_<%= app_name %>_domain_<%= domain %>_path
        <% else -%>
  use_backend php_app_servers if php_application_<%= app_name %>_domain_<%= domain %>
        <% end -%>
      <% end -%>
    <% end -%>
  <% end -%>
  
  <% unless @node[:haproxy][:rails_applications].empty? || @node[:haproxy][:rails_backends].empty? -%>
    <% @node[:haproxy][:rails_applications].each do |app_name, app_config| -%>
      <% app_config['domains'].each do |domain| -%>
        <% if app_config['mounted_at'] -%>
  use_backend rails_app_servers if rails_application_<%= app_name %>_domain_<%= domain %> rails_application_<%= app_name %>_domain_<%= domain %>_path
        <% else -%>
  use_backend rails_app_servers if rails_application_<%= app_name %>_domain_<%= domain %>
        <% end -%>
      <% end -%>
    <% end -%>
  <% end -%>
    
  <% if !@node[:haproxy][:rails_backends].empty? -%>
  default_backend rails_app_servers
  <% elsif !@node[:haproxy][:php_backends].empty? -%>
  default_backend php_app_servers
  <% elsif !@node[:haproxy][:static_backends].empty? -%>
  default_backend static_servers
  <% end -%>
  
frontend https-in
  mode tcp
  bind :443
  
  # all domains of Rails applications
  <% @node[:haproxy][:rails_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl rails_applications_ssl hdr_end(host) -i <%= domain %>
    <% end -%>
  <% end -%>

  # all domains of PHP applications
  <% @node[:haproxy][:php_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl php_applications_ssl hdr_end(host) -i <%= domain %>
    <% end -%>
  <% end -%>
  
  # all domains of static applications
  <% @node[:haproxy][:static_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl static_applications_ssl hdr_end(host) -i <%= domain %>
    <% end -%>
  <% end -%>

  <% unless @node[:haproxy][:rails_applications].empty? || @node[:haproxy][:rails_backends].empty? -%>
  use_backend rails_app_servers_ssl if rails_applications_ssl
  <% end -%>
  <% unless @node[:haproxy][:php_applications].empty? || @node[:haproxy][:php_backends].empty? -%>
  use_backend php_app_servers_ssl if php_applications_ssl
  <% end -%>
  <% unless @node[:haproxy][:static_applications].empty? || @node[:haproxy][:static_backends].empty? -%>
  use_backend static_servers_ssl if static_applications_ssl
  <% end -%>
  
  <% if !@node[:haproxy][:rails_backends].empty? -%>
  default_backend rails_app_servers_ssl
  <% elsif !@node[:haproxy][:php_backends].empty? -%>
  default_backend php_app_servers_ssl
  <% elsif !@node[:haproxy][:static_backends].empty? -%>
  default_backend static_servers_ssl
  <% end -%>

<% end -%>  